import React from 'react';
import { map as _map } from 'lodash';
import { connect } from 'react-redux';
import { DropDownMenu, MenuItem } from 'material-ui';


class refText extends React.Component {

    constructor(props) {
        super(props);
        this.state = {
            selectedRouteIndex: 0,
        };
    }

    onSelectedRouteChange = (event, index, value) => {
        this.setState({
            selectedRouteIndex: value
        });
    }

    renderRouteSelector = (routes = []) => {
        return (<span>{Locale.get("route")}: <DropDownMenu
            id="routeTimetableRouteSelector"
            value={this.state.selectedRouteIndex}
            onChange={this.onSelectedRouteChange}
        >
            {routes.map((route, index) => (
                <MenuItem key={index} value={index} primaryText={route.routeName} />
            ))}
        </DropDownMenu></span>);
    }

    renderEnergyConsuption = (energyData, selectedScenario) => {

        const header = ['Bus stop name', 'Depot', 'Distance', 'Traction', 'Auxillary', 'Battery Losses', 'HVAC', 'Total'];

        const rows = _map(energyData && energyData.emergencyConsumption, (each) => {
            const busStops = selectedScenario && selectedScenario.busStops.find(data => data.id === each.busStopId);
            //depotId
            const depotName = selectedScenario && selectedScenario.busStops.find(data => data.id === each.depotId);
            return {
                busstopName: busStops.name,
                depot: depotName.name,
                distance: each.distance.toFixed(2),
                traction: each.traction.toFixed(2),
                aux: each.aux.toFixed(2),
                batteryLosses: each.batteryLosses.toFixed(2),
                hvac: each.hvac,
                total: each.total.toFixed(2)
            }

        })

        return <GenericTable
            header={header}
            rows={rows}
        />;
    }

    render() {

        const { emergencyConsumptionResult } = this.props.simulationResult;
        const { selectedRouteIndex } = this.state;
        const selectedConsumption = emergencyConsumptionResult && emergencyConsumptionResult[selectedRouteIndex];
        const selectedScenario = this.props.scenario.routes[selectedRouteIndex];
        console.log("scenario", this.props.scenario)

        return <div>
            {this.renderRouteSelector(emergencyConsumptionResult)}
            {this.renderEnergyConsuption(selectedConsumption, selectedScenario)}
        </div>;
    }
}

const mapStateToProps = (state) => ({
    costs: state.simulation.simulationResult.optimizedDesign.costs,
    simulationResult: state.simulation.simulationResult,
    scenario: state.scenario.data
});

export default connect(mapStateToProps)(refText);


data format:
[
  {
    "routeId": 56,
    "routeName": "SanFrancisco41Depot",
    "emergencyConsumption": [
      {
        "busStopId": 2502,
        "depotId": 2544,
        "traction": 3.396947229937569,
        "aux": 1.694120833332135,
        "hvac": 0,
        "batteryLosses": 0.19060322545889521,
        "total": 5.2816712887285995,
        "distance": 4982.659788501028
      }
    ]
  }
]


